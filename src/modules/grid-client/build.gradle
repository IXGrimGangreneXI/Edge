plugins {
    id 'java'
	id 'maven-publish'
}

version = "1.0.0.A1"
group = "org.asf.edge"

sourceCompatibility = '1.17'
targetCompatibility = '1.17'

def authorname = "AerialWorks Software Foundation"

apply plugin: 'eclipse'
apply plugin: 'idea'

repositories {
    mavenCentral()
    flatDir {
       dirs '../../../libraries', '../../../fluid', '../../../deps'
   }
}

compileJava {
	options.compilerArgs << '-parameters'
}

dependencies {
	implementation project(":deps:connective-http")
	implementation project(":src:modulemanager")
	implementation project(":src:common")
	implementation project(":src:gameplayapi")

	implementation group: 'com.google.code.gson', name: 'gson', version: '2.9.0'
	implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.17.0'
	implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.17.0'
	
	implementation group: 'org.bouncycastle', name: 'bcpkix-jdk14', version: '1.73'
}

/*task installation () {
	doLast {
		for (def task : project.tasks) {
			if (task instanceof AbstractArchiveTask) {
				if (!task.getArchiveClassifier().get().isEmpty())
					continue;
				copy {
					from task.getArchiveFile().get()
					rename task.getArchiveFile().get().getAsFile().getName(), task.getArchiveBaseName().get() + (task.getArchiveClassifier().get() != null && !task.getArchiveClassifier().get().isEmpty() ? "-" + task.getArchiveClassifier().get() : "") + "." + task.getArchiveExtension().get()
					into "../../../build/pkg-sentinel/expandedserver/modules"
				}
			}
		}
	}
}

installation.dependsOn project.tasks.build
build.finalizedBy installation*/

eclipse {
  jdt {
	  file {
		  withProperties { properties ->
			  properties.setProperty("org.eclipse.jdt.core.compiler.codegen.methodParameters", "generate")
		  }
	  }
  }
}
