plugins {
    id 'java'
	id 'maven-publish'
}

version = "1.0.0.A2"
group = "org.asf.edge"

sourceCompatibility = '1.17'
targetCompatibility = '1.17'

def authorname = "AerialWorks Software Foundation"

apply plugin: 'eclipse'
apply plugin: 'idea'

repositories {
    mavenCentral()
    flatDir {
       dirs '../../libraries', '../../fluid', '../../deps'
   }
}

compileJava {
	options.compilerArgs << '-parameters'
}

task javaDocs(type: Javadoc) {
	classpath = sourceSets.main.runtimeClasspath
	source = sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: 'javaDocs') {
	from javadoc
	classifier = 'javadoc'
	exclude "**/extra/**"
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
	exclude "**/extra/**"
}

artifacts {
	archives javadocJar
	archives sourcesJar
}

dependencies {
	implementation project(":deps:connective-http")
	implementation name: 'Fluid', version: '1.0.0.A33'
	
	implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.17.0'
	implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.17.0'
	implementation group: 'org.bouncycastle', name: 'bcpkix-jdk14', version: '1.73'

	implementation 'org.ow2.asm:asm:9.1'
	implementation 'org.ow2.asm:asm-tree:9.1'
	implementation 'org.ow2.asm:asm-commons:9.1'
	
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.9.0'
	implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-xml', version: '2.15.2'

	implementation group: 'javax.activation', name: 'activation', version: '1.1.1'
	
	implementation project(":src:common")
	implementation project(":src:modulemanager")
}

project.configurations.implementation.canBeResolved = true

task installation () {
	doLast {
		copy {
			from "edge-contentserver"
			from "edge-contentserver.bat"
			from "edge-contentserverdumper"
			from "edge-contentserverdumper.bat"
			into "../../build/contentserver/" + project.version
		}
		for (ResolvedArtifact arti : project.configurations.implementation.resolvedConfiguration.getResolvedArtifacts()) {
			if (arti.getClassifier() != null)
				continue;
			copy {
				from arti.file
				rename arti.file.getName(), arti.name + (arti.getClassifier() != null && !arti.getClassifier().isEmpty() ? "-" + arti.getClassifier() : "") + "." + arti.getExtension()
				into "../../build/contentserver/" + project.version + "/libs"
			}
		}
		for (def task : project.tasks) {
			if (task instanceof AbstractArchiveTask) {
				if (!task.getArchiveClassifier().get().isEmpty())
					continue;
					
				copy {
					from task.getArchiveFile().get()
					rename task.getArchiveFile().get().getAsFile().getName(), task.getArchiveBaseName().get() + (task.getArchiveClassifier().get() != null && !task.getArchiveClassifier().get().isEmpty() ? "-" + task.getArchiveClassifier().get() : "") + "." + task.getArchiveExtension().get()
					into "../../build/contentserver/" + project.version
				}
			}
		}
	}
}

installation.dependsOn project.tasks.build
build.finalizedBy installation

import java.nio.file.*
task updateData () {
	doLast {
		copy {
			from "edge-contentserver"
			from "edge-contentserver.bat"
			into "../../build/update/" + project.name + "/" + project.version
		}
		String data = ""
		for (ResolvedArtifact arti : project.configurations.implementation.resolvedConfiguration.getResolvedArtifacts()) {
			if (arti.getClassifier() != null)
				continue;
			copy {
				from arti.file
				rename arti.file.getName(), arti.name + (arti.getClassifier() != null && !arti.getClassifier().isEmpty() ? "-" + arti.getClassifier() : "") + "." + arti.getExtension()
				into "../../build/update/" + project.name + "/" + project.version + "/libs"
				data += "libs/" + arti.name + (arti.getClassifier() != null && !arti.getClassifier().isEmpty() ? "-" + arti.getClassifier() : "") + "." + arti.getExtension() + "\n"
			}
		}
		for (def task : project.tasks) {
			if (task instanceof AbstractArchiveTask) {
				if (!task.getArchiveClassifier().get().isEmpty())
					continue;
					
				copy {
					from task.getArchiveFile().get()
					rename task.getArchiveFile().get().getAsFile().getName(), task.getArchiveBaseName().get() + (task.getArchiveClassifier().get() != null && !task.getArchiveClassifier().get().isEmpty() ? "-" + task.getArchiveClassifier().get() : "") + "." + task.getArchiveExtension().get()
					into "../../build/update/" + project.name + "/" + project.version
					data += task.getArchiveBaseName().get() + (task.getArchiveClassifier().get() != null && !task.getArchiveClassifier().get().isEmpty() ? "-" + task.getArchiveClassifier().get() : "") + "." + task.getArchiveExtension().get() + "\n"
				}
			}
		}
		Files.writeString(file("../../build/update/" + project.name + "/" + project.version + "/update.list").toPath(), data)
	}
}

updateData.dependsOn project.tasks.build
build.finalizedBy updateData

eclipse {
  jdt {
	  file {
		  withProperties { properties ->
			  properties.setProperty("org.eclipse.jdt.core.compiler.codegen.methodParameters", "generate")
		  }
	  }
  }
}